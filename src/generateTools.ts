import { writeFileSync } from 'fs';
import { getToolsFromOpenApi } from './toolUtils.js';

const OPENAPI_SPEC_URL = 'https://api.va.landing.ai/openapi.json';

const TOOL_WHITELIST = [
    'text-to-object-detection',
    'text-to-instance-segmentation',
    'activity-recognition',
    'depth-pro',
    'agentic-document-analysis',
];

async function generateToolDefinitions(): Promise<void> {
    try {
        console.log('Fetching tools from OpenAPI spec...');
        const allTools = await getToolsFromOpenApi(OPENAPI_SPEC_URL);
        
        const filteredTools = allTools.filter((tool) => TOOL_WHITELIST.includes(tool.name));
        console.log(`Filtered ${filteredTools.length} tools from ${allTools.length} available tools`);
        
        const mapEntries = filteredTools.map((def) => `  ["${def.name}", ${JSON.stringify(def, null, 2)}]`);
        
        writeToolDefinitionFiles(mapEntries);
        console.log('Successfully generated toolDefinitionMap files in both src/ and build/ directories');
        
    } catch (err) {
        console.error('Failed to generate tool definition map:', err);
        process.exit(1);
    }
}

function writeToolDefinitionFiles(mapEntries: string[]): void {
    const srcContent = generateSourceFileContent(mapEntries);
    const buildContent = generateBuildFileContent(mapEntries);
    
    writeFileSync('src/toolDefinitionMap.ts', srcContent);
    
    try {
        writeFileSync('build/toolDefinitionMap.js', buildContent);
    } catch (err) {
        console.error('Warning: Could not write to build directory. Tools will only be available after next build:', err);
    }
}

function generateSourceFileContent(mapEntries: string[]): string {
    return `// Generated by generateTools.ts
import { McpToolDefinition } from './types.js';

export const toolDefinitionMap = new Map<string, McpToolDefinition>([
${mapEntries.join(',\n')}
]);
`;
}

function generateBuildFileContent(mapEntries: string[]): string {
    return `// Generated by generateTools.ts
export const toolDefinitionMap = new Map([
${mapEntries.join(',\n')}
]);
`;
}

generateToolDefinitions();